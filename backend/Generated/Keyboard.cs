// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: keyboard.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Naki3D.Common.Protocol {

  /// <summary>Holder for reflection information generated from keyboard.proto</summary>
  public static partial class KeyboardReflection {

    #region Descriptor
    /// <summary>File descriptor for keyboard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KeyboardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5rZXlib2FyZC5wcm90bxIWbmFraTNkLmNvbW1vbi5wcm90b2NvbCJaChJL",
            "ZXlib2FyZFVwZGF0ZURhdGESMwoEdHlwZRgBIAEoDjIlLm5ha2kzZC5jb21t",
            "b24ucHJvdG9jb2wuS2V5QWN0aW9uVHlwZRIPCgdrZXljb2RlGAIgASgFKikK",
            "DUtleUFjdGlvblR5cGUSCgoGS0VZX1VQEAASDAoIS0VZX0RPV04QAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Naki3D.Common.Protocol.KeyActionType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.KeyboardUpdateData), global::Naki3D.Common.Protocol.KeyboardUpdateData.Parser, new[]{ "Type", "Keycode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KeyActionType {
    [pbr::OriginalName("KEY_UP")] KeyUp = 0,
    [pbr::OriginalName("KEY_DOWN")] KeyDown = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Raspi -> Device
  /// </summary>
  public sealed partial class KeyboardUpdateData : pb::IMessage<KeyboardUpdateData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeyboardUpdateData> _parser = new pb::MessageParser<KeyboardUpdateData>(() => new KeyboardUpdateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyboardUpdateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.KeyboardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardUpdateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardUpdateData(KeyboardUpdateData other) : this() {
      type_ = other.type_;
      keycode_ = other.keycode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardUpdateData Clone() {
      return new KeyboardUpdateData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Naki3D.Common.Protocol.KeyActionType type_ = global::Naki3D.Common.Protocol.KeyActionType.KeyUp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Naki3D.Common.Protocol.KeyActionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "keycode" field.</summary>
    public const int KeycodeFieldNumber = 2;
    private int keycode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Keycode {
      get { return keycode_; }
      set {
        keycode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyboardUpdateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyboardUpdateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Keycode != other.Keycode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Naki3D.Common.Protocol.KeyActionType.KeyUp) hash ^= Type.GetHashCode();
      if (Keycode != 0) hash ^= Keycode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Naki3D.Common.Protocol.KeyActionType.KeyUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Keycode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Keycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Naki3D.Common.Protocol.KeyActionType.KeyUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Keycode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Keycode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Naki3D.Common.Protocol.KeyActionType.KeyUp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Keycode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Keycode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyboardUpdateData other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Naki3D.Common.Protocol.KeyActionType.KeyUp) {
        Type = other.Type;
      }
      if (other.Keycode != 0) {
        Keycode = other.Keycode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Naki3D.Common.Protocol.KeyActionType) input.ReadEnum();
            break;
          }
          case 16: {
            Keycode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Naki3D.Common.Protocol.KeyActionType) input.ReadEnum();
            break;
          }
          case 16: {
            Keycode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
