// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Naki3D.Common.Json;
//
//    var packageDesc = PackageDesc.FromJson(jsonString);

namespace Naki3D.Common.Json
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PackageDesc
    {
        [JsonProperty("$schema")]
        public string Schema { get; set; }

        [JsonProperty("inputs", NullValueHandling = NullValueHandling.Ignore)]
        public Action[] Inputs { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("package")]
        public Package Package { get; set; }

        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
        public Parameters Parameters { get; set; }

        [JsonProperty("sync", NullValueHandling = NullValueHandling.Ignore)]
        public Sync Sync { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public partial class Action
    {
        [JsonProperty("mapping")]
        public Mapping Mapping { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public InputType Type { get; set; }
    }

    public partial class Mapping
    {
        [JsonProperty("eventName", NullValueHandling = NullValueHandling.Ignore)]
        public string EventName { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("gestureName", NullValueHandling = NullValueHandling.Ignore)]
        public string GestureName { get; set; }

        [JsonProperty("endGesture", NullValueHandling = NullValueHandling.Ignore)]
        public string EndGesture { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public string Position { get; set; }

        [JsonProperty("startGesture", NullValueHandling = NullValueHandling.Ignore)]
        public string StartGesture { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public Condition? Condition { get; set; }

        [JsonProperty("threshold", NullValueHandling = NullValueHandling.Ignore)]
        public string Threshold { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("exposition")]
        public string Exposition { get; set; }

        [JsonProperty("other", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Other { get; set; }
    }

    public partial class Package
    {
        [JsonProperty("checksum")]
        public string Checksum { get; set; }

        [JsonProperty("type")]
        public PackageType Type { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Parameters
    {
        [JsonProperty("displayType", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayType? DisplayType { get; set; }

        [JsonProperty("settings")]
        public object[] Settings { get; set; }
    }

    public partial class Sync
    {
        [JsonProperty("canvasDimensions")]
        public CanvasDimensions CanvasDimensions { get; set; }

        [JsonProperty("elements")]
        public Element[] Elements { get; set; }

        [JsonProperty("selfIndex")]
        public long SelfIndex { get; set; }
    }

    public partial class CanvasDimensions
    {
        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }
    }

    public partial class Element
    {
        [JsonProperty("hostname")]
        public string Hostname { get; set; }

        [JsonProperty("role")]
        public string Role { get; set; }

        [JsonProperty("viewportTransform")]
        public string ViewportTransform { get; set; }
    }

    public enum Condition { Above, AboveOrEquals, Below, BelowOrEquals, Equals };

    public enum InputType { Event, Gesture, GestureDrag, Value, ValueTrigger };

    public enum PackageType { Data, Script };

    public enum DisplayType { Gallery, Model, Multires, Quiz, Scene, Video };

    public partial class PackageDesc
    {
        public static PackageDesc FromJson(string json) => JsonConvert.DeserializeObject<PackageDesc>(json, Naki3D.Common.Json.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PackageDesc self) => JsonConvert.SerializeObject(self, Naki3D.Common.Json.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ConditionConverter.Singleton,
                InputTypeConverter.Singleton,
                PackageTypeConverter.Singleton,
                DisplayTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ConditionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Condition) || t == typeof(Condition?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "above":
                    return Condition.Above;
                case "aboveOrEquals":
                    return Condition.AboveOrEquals;
                case "below":
                    return Condition.Below;
                case "belowOrEquals":
                    return Condition.BelowOrEquals;
                case "equals":
                    return Condition.Equals;
            }
            throw new Exception("Cannot unmarshal type Condition");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Condition)untypedValue;
            switch (value)
            {
                case Condition.Above:
                    serializer.Serialize(writer, "above");
                    return;
                case Condition.AboveOrEquals:
                    serializer.Serialize(writer, "aboveOrEquals");
                    return;
                case Condition.Below:
                    serializer.Serialize(writer, "below");
                    return;
                case Condition.BelowOrEquals:
                    serializer.Serialize(writer, "belowOrEquals");
                    return;
                case Condition.Equals:
                    serializer.Serialize(writer, "equals");
                    return;
            }
            throw new Exception("Cannot marshal type Condition");
        }

        public static readonly ConditionConverter Singleton = new ConditionConverter();
    }

    internal class InputTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InputType) || t == typeof(InputType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "event":
                    return InputType.Event;
                case "gesture":
                    return InputType.Gesture;
                case "gestureDrag":
                    return InputType.GestureDrag;
                case "value":
                    return InputType.Value;
                case "valueTrigger":
                    return InputType.ValueTrigger;
            }
            throw new Exception("Cannot unmarshal type InputType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InputType)untypedValue;
            switch (value)
            {
                case InputType.Event:
                    serializer.Serialize(writer, "event");
                    return;
                case InputType.Gesture:
                    serializer.Serialize(writer, "gesture");
                    return;
                case InputType.GestureDrag:
                    serializer.Serialize(writer, "gestureDrag");
                    return;
                case InputType.Value:
                    serializer.Serialize(writer, "value");
                    return;
                case InputType.ValueTrigger:
                    serializer.Serialize(writer, "valueTrigger");
                    return;
            }
            throw new Exception("Cannot marshal type InputType");
        }

        public static readonly InputTypeConverter Singleton = new InputTypeConverter();
    }

    internal class PackageTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PackageType) || t == typeof(PackageType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "data":
                    return PackageType.Data;
                case "script":
                    return PackageType.Script;
            }
            throw new Exception("Cannot unmarshal type PackageType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PackageType)untypedValue;
            switch (value)
            {
                case PackageType.Data:
                    serializer.Serialize(writer, "data");
                    return;
                case PackageType.Script:
                    serializer.Serialize(writer, "script");
                    return;
            }
            throw new Exception("Cannot marshal type PackageType");
        }

        public static readonly PackageTypeConverter Singleton = new PackageTypeConverter();
    }

    internal class DisplayTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DisplayType) || t == typeof(DisplayType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "gallery":
                    return DisplayType.Gallery;
                case "model":
                    return DisplayType.Model;
                case "multires":
                    return DisplayType.Multires;
                case "quiz":
                    return DisplayType.Quiz;
                case "scene":
                    return DisplayType.Scene;
                case "video":
                    return DisplayType.Video;
            }
            throw new Exception("Cannot unmarshal type DisplayType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DisplayType)untypedValue;
            switch (value)
            {
                case DisplayType.Gallery:
                    serializer.Serialize(writer, "gallery");
                    return;
                case DisplayType.Model:
                    serializer.Serialize(writer, "model");
                    return;
                case DisplayType.Multires:
                    serializer.Serialize(writer, "multires");
                    return;
                case DisplayType.Quiz:
                    serializer.Serialize(writer, "quiz");
                    return;
                case DisplayType.Scene:
                    serializer.Serialize(writer, "scene");
                    return;
                case DisplayType.Video:
                    serializer.Serialize(writer, "video");
                    return;
            }
            throw new Exception("Cannot marshal type DisplayType");
        }

        public static readonly DisplayTypeConverter Singleton = new DisplayTypeConverter();
    }
}
