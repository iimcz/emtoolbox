// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Naki3D.Common.Protocol {

  /// <summary>Holder for reflection information generated from camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjYW1lcmEucHJvdG8SFm5ha2kzZC5jb21tb24ucHJvdG9jb2waC3R5cGVz",
            "LnByb3RvIlEKC0dlc3R1cmVEYXRhEjEKBHR5cGUYASABKA4yIy5uYWtpM2Qu",
            "Y29tbW9uLnByb3RvY29sLkdlc3R1cmVUeXBlEg8KB3VzZXJfaWQYAiABKAUi",
            "ngEKEEhhbmRNb3ZlbWVudERhdGESLgoEaGFuZBgBIAEoDjIgLm5ha2kzZC5j",
            "b21tb24ucHJvdG9jb2wuSGFuZFR5cGUSNgoNcHJval9wb3NpdGlvbhgCIAEo",
            "CzIfLm5ha2kzZC5jb21tb24ucHJvdG9jb2wuVmVjdG9yMxIRCglvcGVuX2hh",
            "bmQYAyABKAgSDwoHdXNlcl9pZBgEIAEoBSI/ChNCZXN0VXNlckNoYW5nZWRE",
            "YXRhEhQKDGJlc3RfdXNlcl9pZBgBIAEoBRISCgp1c2VyX2NvdW50GAIgASgF",
            "KpIBCgtHZXN0dXJlVHlwZRISCg5HRVNUVVJFX1dBVklORxAAEhYKEkdFU1RV",
            "UkVfU1dJUEVfTEVGVBABEhcKE0dFU1RVUkVfU1dJUEVfUklHSFQQAhIUChBH",
            "RVNUVVJFX1NXSVBFX1VQEAMSFgoSR0VTVFVSRV9TV0lQRV9ET1dOEAQSEAoM",
            "R0VTVFVSRV9QVVNIEAUqKQoISGFuZFR5cGUSDQoJSEFORF9MRUZUEAASDgoK",
            "SEFORF9SSUdIVBABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Naki3D.Common.Protocol.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Naki3D.Common.Protocol.GestureType), typeof(global::Naki3D.Common.Protocol.HandType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.GestureData), global::Naki3D.Common.Protocol.GestureData.Parser, new[]{ "Type", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.HandMovementData), global::Naki3D.Common.Protocol.HandMovementData.Parser, new[]{ "Hand", "ProjPosition", "OpenHand", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.BestUserChangedData), global::Naki3D.Common.Protocol.BestUserChangedData.Parser, new[]{ "BestUserId", "UserCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GestureType {
    [pbr::OriginalName("GESTURE_WAVING")] GestureWaving = 0,
    [pbr::OriginalName("GESTURE_SWIPE_LEFT")] GestureSwipeLeft = 1,
    [pbr::OriginalName("GESTURE_SWIPE_RIGHT")] GestureSwipeRight = 2,
    [pbr::OriginalName("GESTURE_SWIPE_UP")] GestureSwipeUp = 3,
    [pbr::OriginalName("GESTURE_SWIPE_DOWN")] GestureSwipeDown = 4,
    [pbr::OriginalName("GESTURE_PUSH")] GesturePush = 5,
  }

  public enum HandType {
    [pbr::OriginalName("HAND_LEFT")] HandLeft = 0,
    [pbr::OriginalName("HAND_RIGHT")] HandRight = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Raspi -> Device
  /// </summary>
  public sealed partial class GestureData : pb::IMessage<GestureData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GestureData> _parser = new pb::MessageParser<GestureData>(() => new GestureData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GestureData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GestureData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GestureData(GestureData other) : this() {
      type_ = other.type_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GestureData Clone() {
      return new GestureData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Naki3D.Common.Protocol.GestureType type_ = global::Naki3D.Common.Protocol.GestureType.GestureWaving;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Naki3D.Common.Protocol.GestureType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GestureData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GestureData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Naki3D.Common.Protocol.GestureType.GestureWaving) hash ^= Type.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Naki3D.Common.Protocol.GestureType.GestureWaving) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Naki3D.Common.Protocol.GestureType.GestureWaving) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Naki3D.Common.Protocol.GestureType.GestureWaving) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GestureData other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Naki3D.Common.Protocol.GestureType.GestureWaving) {
        Type = other.Type;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Naki3D.Common.Protocol.GestureType) input.ReadEnum();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Naki3D.Common.Protocol.GestureType) input.ReadEnum();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMovementData : pb::IMessage<HandMovementData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMovementData> _parser = new pb::MessageParser<HandMovementData>(() => new HandMovementData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandMovementData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.CameraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandMovementData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandMovementData(HandMovementData other) : this() {
      hand_ = other.hand_;
      projPosition_ = other.projPosition_ != null ? other.projPosition_.Clone() : null;
      openHand_ = other.openHand_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandMovementData Clone() {
      return new HandMovementData(this);
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 1;
    private global::Naki3D.Common.Protocol.HandType hand_ = global::Naki3D.Common.Protocol.HandType.HandLeft;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Naki3D.Common.Protocol.HandType Hand {
      get { return hand_; }
      set {
        hand_ = value;
      }
    }

    /// <summary>Field number for the "proj_position" field.</summary>
    public const int ProjPositionFieldNumber = 2;
    private global::Naki3D.Common.Protocol.Vector3 projPosition_;
    /// <summary>
    /// (x, y from 0.0 to 1.0, z is real)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Naki3D.Common.Protocol.Vector3 ProjPosition {
      get { return projPosition_; }
      set {
        projPosition_ = value;
      }
    }

    /// <summary>Field number for the "open_hand" field.</summary>
    public const int OpenHandFieldNumber = 3;
    private bool openHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenHand {
      get { return openHand_; }
      set {
        openHand_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 4;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandMovementData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandMovementData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hand != other.Hand) return false;
      if (!object.Equals(ProjPosition, other.ProjPosition)) return false;
      if (OpenHand != other.OpenHand) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hand != global::Naki3D.Common.Protocol.HandType.HandLeft) hash ^= Hand.GetHashCode();
      if (projPosition_ != null) hash ^= ProjPosition.GetHashCode();
      if (OpenHand != false) hash ^= OpenHand.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Hand != global::Naki3D.Common.Protocol.HandType.HandLeft) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Hand);
      }
      if (projPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProjPosition);
      }
      if (OpenHand != false) {
        output.WriteRawTag(24);
        output.WriteBool(OpenHand);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Hand != global::Naki3D.Common.Protocol.HandType.HandLeft) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Hand);
      }
      if (projPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProjPosition);
      }
      if (OpenHand != false) {
        output.WriteRawTag(24);
        output.WriteBool(OpenHand);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hand != global::Naki3D.Common.Protocol.HandType.HandLeft) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Hand);
      }
      if (projPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjPosition);
      }
      if (OpenHand != false) {
        size += 1 + 1;
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandMovementData other) {
      if (other == null) {
        return;
      }
      if (other.Hand != global::Naki3D.Common.Protocol.HandType.HandLeft) {
        Hand = other.Hand;
      }
      if (other.projPosition_ != null) {
        if (projPosition_ == null) {
          ProjPosition = new global::Naki3D.Common.Protocol.Vector3();
        }
        ProjPosition.MergeFrom(other.ProjPosition);
      }
      if (other.OpenHand != false) {
        OpenHand = other.OpenHand;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Hand = (global::Naki3D.Common.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 18: {
            if (projPosition_ == null) {
              ProjPosition = new global::Naki3D.Common.Protocol.Vector3();
            }
            input.ReadMessage(ProjPosition);
            break;
          }
          case 24: {
            OpenHand = input.ReadBool();
            break;
          }
          case 32: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Hand = (global::Naki3D.Common.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 18: {
            if (projPosition_ == null) {
              ProjPosition = new global::Naki3D.Common.Protocol.Vector3();
            }
            input.ReadMessage(ProjPosition);
            break;
          }
          case 24: {
            OpenHand = input.ReadBool();
            break;
          }
          case 32: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BestUserChangedData : pb::IMessage<BestUserChangedData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BestUserChangedData> _parser = new pb::MessageParser<BestUserChangedData>(() => new BestUserChangedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BestUserChangedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.CameraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestUserChangedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestUserChangedData(BestUserChangedData other) : this() {
      bestUserId_ = other.bestUserId_;
      userCount_ = other.userCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BestUserChangedData Clone() {
      return new BestUserChangedData(this);
    }

    /// <summary>Field number for the "best_user_id" field.</summary>
    public const int BestUserIdFieldNumber = 1;
    private int bestUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BestUserId {
      get { return bestUserId_; }
      set {
        bestUserId_ = value;
      }
    }

    /// <summary>Field number for the "user_count" field.</summary>
    public const int UserCountFieldNumber = 2;
    private int userCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BestUserChangedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BestUserChangedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BestUserId != other.BestUserId) return false;
      if (UserCount != other.UserCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BestUserId != 0) hash ^= BestUserId.GetHashCode();
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BestUserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BestUserId);
      }
      if (UserCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BestUserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BestUserId);
      }
      if (UserCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BestUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BestUserId);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BestUserChangedData other) {
      if (other == null) {
        return;
      }
      if (other.BestUserId != 0) {
        BestUserId = other.BestUserId;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BestUserId = input.ReadInt32();
            break;
          }
          case 16: {
            UserCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BestUserId = input.ReadInt32();
            break;
          }
          case 16: {
            UserCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
