// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: handshake.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Naki3D.Common.Protocol {

  /// <summary>Holder for reflection information generated from handshake.proto</summary>
  public static partial class HandshakeReflection {

    #region Descriptor
    /// <summary>File descriptor for handshake.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HandshakeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9oYW5kc2hha2UucHJvdG8SFm5ha2kzZC5jb21tb24ucHJvdG9jb2waDnJl",
            "c291cmNlLnByb3RvIioKEUNvbm5lY3Rpb25SZXF1ZXN0EhUKDWNvbm5lY3Rp",
            "b25faWQYASABKAkiQQoZQ29ubmVjdGlvbkFja25vd2xlZGdlbWVudBIQCgh2",
            "ZXJpZmllZBgBIAEoCBISCgpzaGFyZWRfa2V5GAIgASgMIl8KEFNjZW5lQ29t",
            "cG9zaXRpb24SMwoJcmVzb3VyY2VzGAEgAygLMiAubmFraTNkLmNvbW1vbi5w",
            "cm90b2NvbC5SZXNvdXJjZRIWCg5wdWJsaWNfc2Vuc29ycxgCIAMoCWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Naki3D.Common.Protocol.ResourceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.ConnectionRequest), global::Naki3D.Common.Protocol.ConnectionRequest.Parser, new[]{ "ConnectionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.ConnectionAcknowledgement), global::Naki3D.Common.Protocol.ConnectionAcknowledgement.Parser, new[]{ "Verified", "SharedKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Naki3D.Common.Protocol.SceneComposition), global::Naki3D.Common.Protocol.SceneComposition.Parser, new[]{ "Resources", "PublicSensors" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Device -> Server
  /// </summary>
  public sealed partial class ConnectionRequest : pb::IMessage<ConnectionRequest> {
    private static readonly pb::MessageParser<ConnectionRequest> _parser = new pb::MessageParser<ConnectionRequest>(() => new ConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.HandshakeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest(ConnectionRequest other) : this() {
      connectionId_ = other.connectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest Clone() {
      return new ConnectionRequest(this);
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    /// <summary>
    /// ID of connecting PC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server -> Device
  /// </summary>
  public sealed partial class ConnectionAcknowledgement : pb::IMessage<ConnectionAcknowledgement> {
    private static readonly pb::MessageParser<ConnectionAcknowledgement> _parser = new pb::MessageParser<ConnectionAcknowledgement>(() => new ConnectionAcknowledgement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionAcknowledgement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.HandshakeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAcknowledgement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAcknowledgement(ConnectionAcknowledgement other) : this() {
      verified_ = other.verified_;
      sharedKey_ = other.sharedKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAcknowledgement Clone() {
      return new ConnectionAcknowledgement(this);
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 1;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "shared_key" field.</summary>
    public const int SharedKeyFieldNumber = 2;
    private pb::ByteString sharedKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Key for p2p communication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedKey {
      get { return sharedKey_; }
      set {
        sharedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionAcknowledgement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionAcknowledgement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Verified != other.Verified) return false;
      if (SharedKey != other.SharedKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (SharedKey.Length != 0) hash ^= SharedKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Verified != false) {
        output.WriteRawTag(8);
        output.WriteBool(Verified);
      }
      if (SharedKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SharedKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Verified != false) {
        size += 1 + 1;
      }
      if (SharedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionAcknowledgement other) {
      if (other == null) {
        return;
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      if (other.SharedKey.Length != 0) {
        SharedKey = other.SharedKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Verified = input.ReadBool();
            break;
          }
          case 18: {
            SharedKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server -> Device
  /// </summary>
  public sealed partial class SceneComposition : pb::IMessage<SceneComposition> {
    private static readonly pb::MessageParser<SceneComposition> _parser = new pb::MessageParser<SceneComposition>(() => new SceneComposition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneComposition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Naki3D.Common.Protocol.HandshakeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneComposition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneComposition(SceneComposition other) : this() {
      resources_ = other.resources_.Clone();
      publicSensors_ = other.publicSensors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneComposition Clone() {
      return new SceneComposition(this);
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Naki3D.Common.Protocol.Resource> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(10, global::Naki3D.Common.Protocol.Resource.Parser);
    private readonly pbc::RepeatedField<global::Naki3D.Common.Protocol.Resource> resources_ = new pbc::RepeatedField<global::Naki3D.Common.Protocol.Resource>();
    /// <summary>
    /// Maybe specify which scene is default? (Or just assume 1st)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Naki3D.Common.Protocol.Resource> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "public_sensors" field.</summary>
    public const int PublicSensorsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_publicSensors_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> publicSensors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Which sensors should broadcast data (bandwidth reasons, maybe not needed?)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PublicSensors {
      get { return publicSensors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneComposition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneComposition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resources_.Equals(other.resources_)) return false;
      if(!publicSensors_.Equals(other.publicSensors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resources_.GetHashCode();
      hash ^= publicSensors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resources_.WriteTo(output, _repeated_resources_codec);
      publicSensors_.WriteTo(output, _repeated_publicSensors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resources_.CalculateSize(_repeated_resources_codec);
      size += publicSensors_.CalculateSize(_repeated_publicSensors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneComposition other) {
      if (other == null) {
        return;
      }
      resources_.Add(other.resources_);
      publicSensors_.Add(other.publicSensors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 18: {
            publicSensors_.AddEntriesFrom(input, _repeated_publicSensors_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
